openapi: 3.1.0
info:
  title: Padel Booking API
  version: 0.1.0
  description: API contract draft for the MVP padel/tennis booking system.
servers:
  - url: https://api.staging.padel-booking.com
    description: Staging server
  - url: https://api.padel-booking.com
    description: Production server

paths:
  /auth/register:
    post:
      summary: Register new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string, format: email }
                password: { type: string, format: password }
                name: { type: string }
              required: [email, password, name]
      responses:
        "201":
          description: User registered
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Email already exists

  /auth/login:
    post:
      summary: Login with email + password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email: { type: string }
                password: { type: string }
              required: [email, password]
      responses:
        "200":
          description: JWT tokens returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  access_token: { type: string }
                  refresh_token: { type: string }
        "401":
          description: Invalid credentials

  /clubs:
    get:
      summary: List all clubs
      responses:
        "200":
          description: List of clubs
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Club" }

    post:
      summary: Create a new club (manager only)
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ClubCreate" }
      responses:
        "201":
          description: Club created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Club" }

  /courts/{court_id}/timeslots:
    get:
      summary: Get available timeslots for a court
      parameters:
        - in: path
          name: court_id
          required: true
          schema: { type: integer }
      responses:
        "200":
          description: List of timeslots
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Timeslot" }

  /bookings:
    post:
      summary: Create a booking
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/BookingCreate" }
      responses:
        "201":
          description: Booking created
          content:
            application/json:
              schema: { $ref: "#/components/schemas/Booking" }

    get:
      summary: Get my bookings
      security: [{ bearerAuth: [] }]
      responses:
        "200":
          description: List of bookings
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Booking" }

  /payments/checkout:
    post:
      summary: Create a Stripe Checkout session
      security: [{ bearerAuth: [] }]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                booking_id: { type: integer }
              required: [booking_id]
      responses:
        "200":
          description: Stripe session URL
          content:
            application/json:
              schema:
                type: object
                properties:
                  checkout_url: { type: string }

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id: { type: integer }
        email: { type: string }
        role: { type: string, enum: [player, club_manager, admin] }
        name: { type: string }
        phone: { type: string, nullable: true }

    Club:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        location: { type: string }
        description: { type: string }

    ClubCreate:
      type: object
      properties:
        name: { type: string }
        location: { type: string }
        description: { type: string }
      required: [name, location]

    Court:
      type: object
      properties:
        id: { type: integer }
        club_id: { type: integer }
        name: { type: string }
        surface_type: { type: string }
        has_lights: { type: boolean }
        price_per_hour: { type: number }

    Timeslot:
      type: object
      properties:
        id: { type: integer }
        court_id: { type: integer }
        start_time: { type: string, format: date-time }
        end_time: { type: string, format: date-time }
        status: { type: string, enum: [available, blocked] }

    Booking:
      type: object
      properties:
        id: { type: integer }
        user_id: { type: integer }
        court_id: { type: integer }
        timeslot_id: { type: integer }
        status: { type: string, enum: [pending, paid, cancelled, expired] }
        created_at: { type: string, format: date-time }

    BookingCreate:
      type: object
      properties:
        court_id: { type: integer }
        timeslot_id: { type: integer }
      required: [court_id, timeslot_id]
